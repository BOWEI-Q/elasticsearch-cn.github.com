---
layout: guide
title: Delete API
cat: 向导
cat_link: guide
sidebar: 帮助文档_api接口
---

p. delete删除接口允许你根据id来删除索引里面的json文档. 下面是一个简单的例子，删除这样一个JSON文档，索引是twitter，在类型tweet下面有一个id为1的文档:

<pre class="prettyprint">
$ curl -XDELETE 'http://localhost:9200/twitter/tweet/1'
</pre>

p. 操作返回的结果如下:

<pre class="prettyprint lang-js">
{
    "ok" : true,
    "_index" : "twitter",
    "_type" : "tweet",
    "_id" : "1",
    "found" : true
}
</pre>

h1. 版本(Versioning)

p. 每个文档都有版本控制的，通过指定 @version@ 来保证删除的对象的时候，没有删错。.

h1. 路由(Routing)

p. 如果索引的时候指定了routing信息，那么删除的时候，也必须指定routing信息，如:

<pre class="prettyprint">
$ curl -XDELETE 'http://localhost:9200/twitter/tweet/1?routing=kimchy'
</pre>

p. 以上删除了id为1的一条tweet, 并且会通过user来进行路由，注意，如果没有指定正确的routing值，删除可能会失败.

p. 很多时候，routing值可能我们并不知道，在这种情况下，如果在mapping里面配置了 @_routing@ 为 @required@, 而你没有指定routing, 则删除操作会分发广播到其他shard上去.

h1. 父对象(Parent)

p. 参数 @parent@ 和routing一样，同样是为了设置合适的routing值.

p. 注意，删除一个父对象，并不会自动的删除它的子对象，一个删除所有子对象的方法是将父对象的id作为参数，然后在子类型上使用 "delete by query":delete-by-query.html 操作，on the child index with the automatically generated (and indexed) field ==_parent==, which is in the format ==parent_type#parent_id==.

h1. Automatic for the Index

p. The delete operation automatically creates an index if it has not been created before (check out the "create index API":admin-indices-create-index.html for manually creating an index), and also automatically creates a dynamic type mapping for the specific type if it has not been created before (check out the "put mapping":admin-indices-put-mapping.html API for manually creating type mapping). 

h1. Distributed

The delete operation gets hashed into a specific shard id. It then gets redirected into the primary shard within that id group, and replicated (if needed) to shard replicas within that id group.

h1. Replication Type

p. The replication of the operation can be done in an asynchronous manner to the replicas (the operation will return once it has be executed on the primary shard). The @replication@ parameter can be set to @async@ (defaults to @sync@) in order to enable it.

h1. Write Consistency

p. Control if the operation will be allowed to execute based on the number of active shards within that partition (replication group). The values allowed are @one@, @quorum@, and @all@. The parameter to set it is @consistency@, and it defaults to the node level setting of @action.write_consistency@ which in turn defaults to @quorum@.

p. For example, in a N shards with 2 replicas index, there will have to be at least 2 active shards within the relevant partition (@quorum@) for the operation to succeed. In a N shards with 1 replica scenario, there will need to be a single shard active (in this case, @one@ and @quorum@ is the same).

h1. Refresh

p. The @refresh@ parameter can be set to @true@ in order to refresh the relevant shard after the delete operation has occurred and make it searchable. Setting it to @true@ should be done after careful thought and verification that this does not cause a heavy load on the system (and slows down indexing).
